{"version":3,"sources":["re_frame/interceptor.cljc"],"sourcesContent":["(ns re-frame.interceptor\n  (:require\n    [re-frame.loggers :refer [console]]\n    [re-frame.interop :refer [empty-queue debug-enabled?]]\n    [re-frame.trace :as trace :include-macros true]\n    [clojure.set :as set]))\n\n\n(def mandatory-interceptor-keys #{:id :after :before})\n\n(defn interceptor?\n  [m]\n  (and (map? m)\n       (= mandatory-interceptor-keys (-> m keys set))))\n\n\n(defn ->interceptor\n  \"Create an interceptor from named arguments\"\n  [& {:as m :keys [id before after]}]\n  (when debug-enabled?\n    (if-let [unknown-keys (seq (set/difference\n                                (-> m keys set)\n                                mandatory-interceptor-keys))]\n      (console :error \"re-frame: ->interceptor\" m \"has unknown keys:\" unknown-keys)))\n  {:id     (or id :unnamed)\n   :before before\n   :after  after })\n\n;; -- Effect Helpers  -----------------------------------------------------------------------------\n\n(defn get-effect\n  ([context]\n   (:effects context))\n  ([context key]\n   (get-in context [:effects key]))\n  ([context key not-found]\n   (get-in context [:effects key] not-found)))\n\n\n(defn assoc-effect\n  [context key value]\n  (assoc-in context [:effects key] value))\n\n;; -- CoEffect Helpers  ---------------------------------------------------------------------------\n\n(defn get-coeffect\n  ([context]\n   (:coeffects context))\n  ([context key]\n   (get-in context [:coeffects key]))\n  ([context key not-found]\n   (get-in context [:coeffects key] not-found)))\n\n(defn assoc-coeffect\n  [context key value]\n  (assoc-in context [:coeffects key] value))\n\n(defn update-coeffect\n  [context key f & args]\n  (apply update-in context [:coeffects key] f args))\n\n;; -- Execute Interceptor Chain  ------------------------------------------------------------------\n\n\n(defn- invoke-interceptor-fn\n  [context interceptor direction]\n  (if-let [f (get interceptor direction)]\n    (f context)\n    context))\n\n\n(defn- invoke-interceptors\n  \"Loop over all interceptors, calling `direction` function on each,\n  threading the value of `context` through every call.\n\n  `direction` is one of `:before` or `:after`.\n\n  Each iteration, the next interceptor to process is obtained from\n  context's `:queue`. After they are processed, interceptors are popped\n  from `:queue` and added to `:stack`.\n\n  After sufficient iteration, `:queue` will be empty, and `:stack` will\n  contain all interceptors processed.\n\n  Returns updated `context`. Ie. the `context` which has been threaded\n  through all interceptor functions.\n\n  Generally speaking, an interceptor's `:before` function will (if present)\n  add to a `context's` `:coeffects`, while it's `:after` function\n  will modify the `context`'s `:effects`.  Very approximately.\n\n  But because all interceptor functions are given `context`, and can\n  return a modified version of it, the way is clear for an interceptor\n  to introspect the stack or queue, or even modify the queue\n  (add new interceptors via `enqueue`?). This is a very fluid arrangement.\"\n  ([context direction]\n   (loop [context context]\n     (let [queue (:queue context)]        ;; future interceptors\n       (if (empty? queue)\n         context\n         (let [interceptor (peek queue)   ;; next interceptor to call\n               stack (:stack context)]    ;; already completed interceptors\n           (recur (-> context\n                      (assoc :queue (pop queue)\n                             :stack (conj stack interceptor))\n                      (invoke-interceptor-fn interceptor direction)))))))))\n\n\n(defn enqueue\n  \"Add a collection of `interceptors` to the end of `context's` execution `:queue`.\n  Returns the updated `context`.\n\n  In an advanced case, this function could allow an interceptor to add new\n  interceptors to the `:queue` of a context.\"\n  [context interceptors]\n  (update context :queue\n          (fnil into empty-queue)\n          interceptors))\n\n\n(defn- context\n  \"Create a fresh context\"\n  ([event interceptors]\n  (-> {}\n      (assoc-coeffect :event event)\n      (enqueue interceptors)))\n  ([event interceptors db]      ;; only used in tests, probably a hack, remove ?  XXX\n   (-> (context event interceptors)\n       (assoc-coeffect :db db))))\n\n\n(defn- change-direction\n  \"Called on completion of `:before` processing, this function prepares/modifies\n   `context` for the backwards sweep of processing in which an interceptor\n   chain's `:after` fns are called.\n\n  At this point in processing, the `:queue` is empty and `:stack` holds all\n  the previously run interceptors. So this function enables the backwards walk\n  by priming `:queue` with what's currently in `:stack`\"\n  [context]\n  (-> context\n      (dissoc :queue)\n      (enqueue (:stack context))))\n\n\n(defn execute\n  \"Executes the given chain (coll) of interceptors.\n\n   Each interceptor has this form:\n       {:before  (fn [context] ...)     ;; returns possibly modified context\n        :after   (fn [context] ...)}    ;; `identity` would be a noop\n\n   Walks the queue of iterceptors from beginning to end, calling the\n   `:before` fn on each, then reverse direction and walk backwards,\n   calling the `:after` fn on each.\n\n   The last interceptor in the chain presumably wraps an event\n   handler fn. So the overall goal of the process is to \\\"handle\n   the given event\\\".\n\n   Thread a `context` through all calls. `context` has this form:\n\n     {:coeffects {:event [:a-query-id :some-param]\n                  :db    <original contents of app-db>}\n      :effects   {:db    <new value for app-db>\n                  :dispatch  [:an-event-id :param1]}\n      :queue     <a collection of further interceptors>\n      :stack     <a collection of interceptors already walked>}\n\n   `context` has `:coeffects` and `:effects` which, if this was a web\n   server, would be somewhat anologous to `request` and `response`\n   respectively.\n\n   `coeffects` will contain data like `event` and the initial\n   state of `db` -  the inputs required by the event handler\n   (sitting presumably on the end of the chain), while handler-returned\n   side effects are put into `:effects` including, but not limited to,\n   new values for `db`.\n\n   The first few interceptors in a chain will likely have `:before`\n   functions which \\\"prime\\\" the `context` by adding the event, and\n   the current state of app-db into `:coeffects`. But interceptors can\n   add whatever they want to `:coeffects` - perhaps the event handler needs\n   some information from localstore, or a random number, or access to\n   a DataScript connection.\n\n   Equally, some interceptors in the chain will have `:after` fn\n   which can process the side effects accumulated into `:effects`\n   including but, not limited to, updates to app-db.\n\n   Through both stages (before and after), `context` contains a `:queue`\n   of interceptors yet to be processed, and a `:stack` of interceptors\n   already done.  In advanced cases, these values can be modified by the\n   functions through which the context is threaded.\"\n  [event-v interceptors]\n  (trace/merge-trace!\n    {:tags {:interceptors interceptors}})\n  (-> (context event-v interceptors)\n      (invoke-interceptors :before)\n      change-direction\n      (invoke-interceptors :after)))\n"],"mappings":"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","names":["re-frame.interceptor/mandatory-interceptor-keys","re-frame.interceptor/interceptor?","cljs.core/map?","m","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/keys","cljs.core/set","i__4642__auto__","len__4641__auto__","args__4647__auto__","cljs.core/IndexedSeq","re-frame.interceptor/->interceptor","argseq__4648__auto__","p__17281","map__17282","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","self__4629__auto__","cljs.core/seq","seq17262","re-frame.interop/debug-enabled?","temp__5455__auto__","clojure.set.difference.cljs$core$IFn$_invoke$arity$2","re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic","unknown-keys","or__4047__auto__","id","before","after","G__17308","re-frame.interceptor/get-effect","js/Error","context","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","key","cljs.core.get_in.cljs$core$IFn$_invoke$arity$3","not-found","re-frame.interceptor/assoc-effect","cljs.core/assoc-in","value","G__17310","re-frame.interceptor/get-coeffect","re-frame.interceptor/assoc-coeffect","re-frame.interceptor/update-coeffect","cljs.core/first","seq17313","cljs.core/next","self__4628__auto__","G__17314","G__17315","G__17316","cljs.core.apply.cljs$core$IFn$_invoke$arity$5","cljs.core/update-in","f","args","re-frame.interceptor/invoke-interceptor-fn","interceptor","direction","re-frame.interceptor/invoke-interceptors","cljs.core/empty?","queue","cljs.core/peek","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","cljs.core/pop","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","stack","re-frame.interceptor/enqueue","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core.fnil.cljs$core$IFn$_invoke$arity$2","cljs.core/into","re-frame.interop/empty-queue","interceptors","G__17322","re-frame.interceptor/context","event","re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2","db","re-frame.interceptor/change-direction","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","re-frame.interceptor/execute","re-frame.trace/is-trace-enabled?","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","re-frame.trace/*current-trace*","cljs.core/merge","new-trace__17224__auto__","event-v"]}
{"version":3,"sources":["pushy/core.cljs"],"sourcesContent":["(ns pushy.core\n  (:require [goog.events :as events]\n            [clojure.string])\n  (:import goog.History\n           goog.history.Html5History\n           goog.history.Html5History.TokenTransformer\n           goog.history.EventType\n           goog.Uri))\n\n(defn- on-click [funk]\n  (events/listen js/document \"click\" funk))\n\n(defn- update-history! [h]\n  (doto h\n    (.setUseFragment false)\n    (.setPathPrefix \"\")\n    (.setEnabled true)))\n\n(defn- set-retrieve-token! [t]\n  (set! (.. t -retrieveToken)\n        (fn [path-prefix location]\n          (str (.-pathname location) (.-search location))))\n  t)\n\n(defn- set-create-url! [t]\n  (set! (.. t -createUrl)\n        (fn [token path-prefix location]\n          (str path-prefix token)))\n  t)\n\n(defn new-history\n  ([]\n   (new-history (-> (TokenTransformer.) set-retrieve-token! set-create-url!)))\n  ([transformer]\n   (-> (Html5History. js/window transformer) update-history!)))\n\n(defprotocol IHistory\n  (set-token! [this token] [this token title])\n  (replace-token! [this token] [this token title])\n  (get-token [this])\n  (start! [this])\n  (stop! [this]))\n\n(defn- processable-url? [uri]\n  (and (not (clojure.string/blank? uri))                    ;; Blank URLs are not processable.\n       (or (and (not (.hasScheme uri)) (not (.hasDomain uri))) ;; By default only process relative URLs + URLs matching window's origin\n           (some? (re-matches (re-pattern (str \"^\" (.-origin js/location) \".*$\"))\n                              (str uri))))))\n\n(defn- get-token-from-uri [uri]\n  (let [path (.getPath uri)\n        query (.getQuery uri)]\n    ;; Include query string in token\n    (if (empty? query) path (str path \"?\" query))))\n\n(defn pushy\n  \"Takes in three functions:\n    * dispatch-fn: the function that dispatches when a match is found\n    * match-fn: the function used to check if a particular route exists\n    * identity-fn: (optional) extract the route from value returned by match-fn\"\n  [dispatch-fn match-fn &\n   {:keys [processable-url? identity-fn prevent-default-when-no-match?]\n    :or   {processable-url?               processable-url?\n           identity-fn                    identity\n           prevent-default-when-no-match? (constantly false)}}]\n\n  (let [history (new-history)\n        event-keys (atom nil)]\n    (reify\n      IHistory\n      (set-token! [_ token]\n        (. history (setToken token)))\n      (set-token! [_ token title]\n        (. history (setToken token title)))\n\n      (replace-token! [_ token]\n        (. history (replaceToken token)))\n      (replace-token! [_ token title]\n        (. history (replaceToken token title)))\n\n      (get-token [_]\n        (.getToken history))\n\n      (start! [this]\n        (stop! this)\n        ;; We want to call `dispatch-fn` on any change to the location\n        (swap! event-keys conj\n               (events/listen history EventType.NAVIGATE\n                              (fn [e]\n                                (when-let [match (-> (.-token e) match-fn identity-fn)]\n                                  (dispatch-fn match)))))\n\n        ;; Dispatch on initialization\n        (when-let [match (-> (get-token this) match-fn identity-fn)]\n          (dispatch-fn match))\n\n        (swap! event-keys conj\n               (on-click\n                (fn [e]\n                  (when-let [el (some-> e .-target (.closest \"a\"))]\n                    (let [uri (.parse Uri (.-href el))]\n                      ;; Proceed if `identity-fn` returns a value and\n                      ;; the user did not trigger the event via one of the\n                      ;; keys we should bypass\n                      (when (and (processable-url? uri)\n                                 ;; Bypass dispatch if any of these keys\n                                 (not (.-altKey e))\n                                 (not (.-ctrlKey e))\n                                 (not (.-metaKey e))\n                                 (not (.-shiftKey e))\n                                 ;; Bypass if target = _blank\n                                 (not (get #{\"_blank\" \"_self\"} (.getAttribute el \"target\")))\n                                 ;; Bypass if explicitly instructed to ignore this element\n                                 (or (not (.hasAttribute el \"data-pushy-ignore\"))\n                                     (= (.getAttribute el \"data-pushy-ignore\") \"false\"))\n                                 ;; Only dispatch on left button click\n                                 (= 0 (.-button e)))\n                        (let [next-token (get-token-from-uri uri)]\n                          (if (identity-fn (match-fn next-token))\n                            ;; Dispatch!\n                            (do\n                              (if-let [title (-> el .-title)]\n                                (set-token! this next-token title)\n                                (set-token! this next-token))\n                              (.preventDefault e))\n\n                            (when (prevent-default-when-no-match? next-token)\n                              (.preventDefault e))))))))))\n        nil)\n\n      (stop! [this]\n        (doseq [key @event-keys]\n          (events/unlistenByKey key))\n        (reset! event-keys nil)))))\n\n(defn supported?\n  \"Returns whether Html5History is supported\"\n  ([] (supported? js/window))\n  ([window] (.isSupported Html5History window)))\n\n;; Backwards compatibility with pushy <= 0.2.2\n(defn push-state!\n  ([dispatch-fn match-fn]\n   (push-state! dispatch-fn match-fn identity))\n  ([dispatch-fn match-fn identity-fn]\n   (let [h (pushy dispatch-fn match-fn :identity-fn identity-fn)]\n     (start! h)\n     h)))\n"],"mappings":"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","names":["pushy.core/on-click","goog.events/listen","js/document","funk","pushy.core/update-history!","G__17696","h","pushy.core/set-retrieve-token!","t","location","pushy.core/set-create-url!","path-prefix","token","G__17698","pushy.core/new-history","js/Error","pushy.core.new_history.cljs$core$IFn$_invoke$arity$1","goog.history.Html5History/TokenTransformer","goog.history/Html5History","js/window","transformer","G__17703","pushy.core/set-token!","goog/typeOf","x__4347__auto__","m__4348__auto__","cljs.core/missing-protocol","G__17708","pushy.core/replace-token!","pushy.core/get-token","pushy.core/start!","pushy.core/stop!","pushy.core/IHistory","this","title","pushy.core/processable-url?","clojure.string/blank?","uri","cljs.core/not","cljs.core/re-matches","cljs.core/re-pattern","js/location","pushy.core/get-token-from-uri","cljs.core/empty?","query","path","i__4642__auto__","len__4641__auto__","args__4647__auto__","cljs.core/IndexedSeq","pushy.core/pushy","argseq__4648__auto__","p__17727","map__17728","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$3","cljs.core/first","seq17724","cljs.core/next","self__4628__auto__","G__17725","G__17726","dispatch-fn","match-fn","processable-url?","identity-fn","prevent-default-when-no-match?","cljs.core/identity","cljs.core/constantly","history","pushy.core.new_history.cljs$core$IFn$_invoke$arity$0","event-keys","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","js/pushy","js/pushy.core","js/pushy.core.t_pushy$core17730","pushy.core/t_pushy$core17730","meta17731","cljs.core/-write","writer__4291__auto__","pushy.core/->t_pushy$core17730","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/conj","G__17739","G__17740","G__17741","goog.history.EventType/NAVIGATE","temp__5457__auto__","G__17745","G__17744","e","match","G__17753","G__17752","G__17754","goog/Uri","el","and__4036__auto__","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","G__17761","next-token","temp__5455__auto__","cljs.core/seq","cljs.core/deref","i__17765","count__17764","chunk__17763","seq__17762","cljs.core/chunked-seq?","cljs.core/chunk-first","cljs.core/chunk-rest","c__4461__auto__","cljs.core/count","goog.events/unlistenByKey","key","cljs.core/reset!","G__17767","pushy.core/supported?","pushy.core.supported_QMARK_.cljs$core$IFn$_invoke$arity$1","window","G__17769","pushy.core/push-state!","pushy.core.push_state_BANG_.cljs$core$IFn$_invoke$arity$3","pushy.core.pushy.cljs$core$IFn$_invoke$arity$variadic"]}
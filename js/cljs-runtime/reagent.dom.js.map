{"version":3,"sources":["reagent/dom.cljs"],"sourcesContent":["(ns reagent.dom\n  (:require [cljsjs.react.dom]\n            [reagent.impl.util :as util]\n            [reagent.impl.template :as tmpl]\n            [reagent.impl.batching :as batch]\n            [reagent.ratom :as ratom]\n            [reagent.debug :refer-macros [dbg]]\n            [reagent.interop :refer-macros [$ $!]]))\n\n(defonce ^:private imported nil)\n\n(defn module []\n  (cond\n    (some? imported) imported\n    (exists? js/ReactDOM) (set! imported js/ReactDOM)\n    (exists? js/require) (or (set! imported (js/require \"react-dom\"))\n                             (throw (js/Error. \"require('react-dom') failed\")))\n    :else\n    (throw (js/Error. \"js/ReactDOM is missing\"))))\n\n\n(defonce ^:private roots (atom {}))\n\n(defn- unmount-comp [container]\n  (swap! roots dissoc container)\n  ($ (module) unmountComponentAtNode container))\n\n(defn- render-comp [comp container callback]\n  (binding [util/*always-update* true]\n    (->> ($ (module) render (comp) container\n            (fn []\n              (binding [util/*always-update* false]\n                (swap! roots assoc container [comp container])\n                (batch/flush-after-render)\n                (if (some? callback)\n                  (callback))))))))\n\n(defn- re-render-component [comp container]\n  (render-comp comp container nil))\n\n(defn render\n  \"Render a Reagent component into the DOM. The first argument may be\n  either a vector (using Reagent's Hiccup syntax), or a React element. The second argument should be a DOM node.\n\n  Optionally takes a callback that is called when the component is in place.\n\n  Returns the mounted component instance.\"\n  ([comp container]\n   (render comp container nil))\n  ([comp container callback]\n   (ratom/flush!)\n   (let [f (fn []\n             (tmpl/as-element (if (fn? comp) (comp) comp)))]\n     (render-comp f container callback))))\n\n(defn unmount-component-at-node [container]\n  (unmount-comp container))\n\n(defn dom-node\n  \"Returns the root DOM node of a mounted component.\"\n  [this]\n  ($ (module) findDOMNode this))\n\n(set! tmpl/find-dom-node dom-node)\n\n(defn force-update-all\n  \"Force re-rendering of all mounted Reagent components. This is\n  probably only useful in a development environment, when you want to\n  update components in response to some dynamic changes to code.\n\n  Note that force-update-all may not update root components. This\n  happens if a component 'foo' is mounted with `(render [foo])` (since\n  functions are passed by value, and not by reference, in\n  ClojureScript). To get around this you'll have to introduce a layer\n  of indirection, for example by using `(render [#'foo])` instead.\"\n  []\n  (ratom/flush!)\n  (doseq [v (vals @roots)]\n    (apply re-render-component v))\n  \"Updated\")\n"],"mappings":"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","names":["js/reagent","js/reagent.dom","js/reagent.dom.imported","reagent.dom/imported","reagent.dom/module","js/ReactDOM","js/require","or__4047__auto__","js/Error","js/reagent.dom.roots","reagent.dom/roots","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","reagent.dom/unmount-comp","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/dissoc","container","reagent.dom/render-comp","*always-update*-temp-val__16938","*always-update*-orig-val__16937","reagent.impl.util/*always-update*","comp","*always-update*-temp-val__16940","*always-update*-orig-val__16939","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","reagent.impl.batching/flush-after-render","callback","reagent.dom/re-render-component","G__16942","reagent.dom/render","reagent.dom.render.cljs$core$IFn$_invoke$arity$3","reagent.ratom/flush!","reagent.impl.template/as-element","cljs.core/fn?","f","reagent.dom/unmount-component-at-node","reagent.dom/dom-node","this","reagent.impl.template/find-dom-node","reagent.dom/force-update-all","cljs.core/seq","i__16947","count__16946","chunk__16945","seq__16944","temp__5457__auto__","cljs.core/chunked-seq?","cljs.core/chunk-first","cljs.core/chunk-rest","c__4461__auto__","cljs.core/count","cljs.core/first","cljs.core/next","cljs.core/deref","cljs.core/vals","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","v"]}
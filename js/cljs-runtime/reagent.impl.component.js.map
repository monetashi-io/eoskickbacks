{"version":3,"sources":["reagent/impl/component.cljs"],"sourcesContent":["(ns reagent.impl.component\n  (:require [reagent.impl.util :as util]\n            [reagent.impl.batching :as batch]\n            [reagent.ratom :as ratom]\n            [reagent.interop :refer-macros [$ $!]]\n            [reagent.debug :refer-macros [dbg prn dev? warn error warn-unless\n                                          assert-callable]]))\n\n(declare ^:dynamic *current-component*)\n\n\n;;; Argv access\n\n(defn shallow-obj-to-map [o]\n  (let [ks (js-keys o)\n        len (alength ks)]\n    (loop [m {} i 0]\n      (if (< i len)\n        (let [k (aget ks i)]\n          (recur (assoc m (keyword k) (aget o k)) (inc i)))\n        m))))\n\n(defn extract-props [v]\n  (let [p (nth v 1 nil)]\n    (if (map? p) p)))\n\n(defn extract-children [v]\n  (let [p (nth v 1 nil)\n        first-child (if (or (nil? p) (map? p)) 2 1)]\n    (if (> (count v) first-child)\n      (subvec v first-child))))\n\n(defn props-argv [c p]\n  (if-some [a ($ p :argv)]\n    a\n    [(.-constructor c) (shallow-obj-to-map p)]))\n\n(defn get-argv [c]\n  (props-argv c ($ c :props)))\n\n(defn get-props [c]\n  (let [p ($ c :props)]\n    (if-some [v ($ p :argv)]\n      (extract-props v)\n      (shallow-obj-to-map p))))\n\n(defn get-children [c]\n  (let [p ($ c :props)]\n    (if-some [v ($ p :argv)]\n      (extract-children v)\n      (->> ($ p :children)\n           ($ util/react Children.toArray)\n           (into [])))))\n\n(defn ^boolean reagent-class? [c]\n  (and (fn? c)\n       (some? (some-> c .-prototype ($ :reagentRender)))))\n\n(defn ^boolean react-class? [c]\n  (and (fn? c)\n       (some? (some-> c .-prototype ($ :render)))))\n\n(defn ^boolean reagent-component? [c]\n  (some? ($ c :reagentRender)))\n\n(defn cached-react-class [c]\n  ($ c :cljsReactClass))\n\n(defn cache-react-class [c constructor]\n  ($! c :cljsReactClass constructor))\n\n\n;;; State\n\n(defn state-atom [this]\n  (let [sa ($ this :cljsState)]\n    (if-not (nil? sa)\n      sa\n      ($! this :cljsState (ratom/atom nil)))))\n\n;; avoid circular dependency: this gets set from template.cljs\n(defonce as-element nil)\n\n\n;;; Rendering\n\n(defn wrap-render [c]\n  (let [f ($ c :reagentRender)\n        _ (assert-callable f)\n        res (if (true? ($ c :cljsLegacyRender))\n              (.call f c c)\n              (let [v (get-argv c)\n                    n (count v)]\n                (case n\n                  1 (.call f c)\n                  2 (.call f c (nth v 1))\n                  3 (.call f c (nth v 1) (nth v 2))\n                  4 (.call f c (nth v 1) (nth v 2) (nth v 3))\n                  5 (.call f c (nth v 1) (nth v 2) (nth v 3) (nth v 4))\n                  (.apply f c (.slice (into-array v) 1)))))]\n    (cond\n      (vector? res) (as-element res)\n      (ifn? res) (let [f (if (reagent-class? res)\n                           (fn [& args]\n                             (as-element (apply vector res args)))\n                           res)]\n                   ($! c :reagentRender f)\n                   (recur c))\n      :else res)))\n\n(declare comp-name)\n\n(defn do-render [c]\n  (binding [*current-component* c]\n    (if (dev?)\n      ;; Log errors, without using try/catch (and mess up call stack)\n      (let [ok (array false)]\n        (try\n          (let [res (wrap-render c)]\n            (aset ok 0 true)\n            res)\n          (finally\n            (when-not (aget ok 0)\n              (error (str \"Error rendering component\"\n                          (comp-name)))))))\n      (wrap-render c))))\n\n\n;;; Method wrapping\n\n(def rat-opts {:no-cache true})\n\n(def static-fns\n  {:render\n   (fn render []\n     (this-as c (if util/*non-reactive*\n                  (do-render c)\n                  (let [rat ($ c :cljsRatom)]\n                    (batch/mark-rendered c)\n                    (if (nil? rat)\n                      (ratom/run-in-reaction #(do-render c) c \"cljsRatom\"\n                                             batch/queue-render rat-opts)\n                      (._run rat false))))))})\n\n(defn custom-wrapper [key f]\n  (case key\n    :getDefaultProps\n    (throw (js/Error. \"getDefaultProps not supported\"))\n\n    :getInitialState\n    (fn getInitialState []\n      (this-as c (reset! (state-atom c) (.call f c c))))\n\n    :componentWillReceiveProps\n    (fn componentWillReceiveProps [nextprops]\n      (this-as c (.call f c c (props-argv c nextprops))))\n\n    :shouldComponentUpdate\n    (fn shouldComponentUpdate [nextprops nextstate]\n      (or util/*always-update*\n          (this-as c\n                   ;; Don't care about nextstate here, we use forceUpdate\n                   ;; when only when state has changed anyway.\n                   (let [old-argv ($ c :props.argv)\n                         new-argv ($ nextprops :argv)\n                         noargv (or (nil? old-argv) (nil? new-argv))]\n                     (cond\n                       (nil? f) (or noargv (not= old-argv new-argv))\n                       noargv (.call f c c (get-argv c) (props-argv c nextprops))\n                       :else  (.call f c c old-argv new-argv))))))\n\n    :componentWillUpdate\n    (fn componentWillUpdate [nextprops]\n      (this-as c (.call f c c (props-argv c nextprops))))\n\n    :componentDidUpdate\n    (fn componentDidUpdate [oldprops]\n      (this-as c (.call f c c (props-argv c oldprops))))\n\n    :componentWillMount\n    (fn componentWillMount []\n      (this-as c\n               ($! c :cljsMountOrder (batch/next-mount-count))\n               (when-not (nil? f)\n                 (.call f c c))))\n\n    :componentDidMount\n    (fn componentDidMount []\n      (this-as c (.call f c c)))\n\n    :componentWillUnmount\n    (fn componentWillUnmount []\n      (this-as c\n               (some-> ($ c :cljsRatom)\n                       ratom/dispose!)\n               (batch/mark-rendered c)\n               (when-not (nil? f)\n                 (.call f c c))))\n\n    nil))\n\n(defn get-wrapper [key f name]\n  (let [wrap (custom-wrapper key f)]\n    (when (and wrap f)\n      (assert-callable f))\n    (or wrap f)))\n\n(def obligatory {:shouldComponentUpdate nil\n                 :componentWillMount nil\n                 :componentWillUnmount nil})\n\n(def dash-to-camel (util/memoize-1 util/dash-to-camel))\n\n(defn camelify-map-keys [fun-map]\n  (reduce-kv (fn [m k v]\n               (assoc m (-> k dash-to-camel keyword) v))\n             {} fun-map))\n\n(defn add-obligatory [fun-map]\n  (merge obligatory fun-map))\n\n(defn wrap-funs [fmap]\n  (when (dev?)\n    (let [renders (select-keys fmap [:render :reagentRender :componentFunction])\n          render-fun (-> renders vals first)]\n      (assert (pos? (count renders)) \"Missing reagent-render\")\n      (assert (== 1 (count renders)) \"Too many render functions supplied\")\n      (assert-callable render-fun)))\n  (let [render-fun (or (:reagentRender fmap)\n                       (:componentFunction fmap))\n        legacy-render (nil? render-fun)\n        render-fun (or render-fun\n                       (:render fmap))\n        name (str (or (:displayName fmap)\n                      (util/fun-name render-fun)))\n        name (case name\n               \"\" (str (gensym \"reagent\"))\n               name)\n        fmap (reduce-kv (fn [m k v]\n                          (assoc m k (get-wrapper k v name)))\n                        {} fmap)]\n    (assoc fmap\n           :displayName name\n           :autobind false\n           :cljsLegacyRender legacy-render\n           :reagentRender render-fun\n           :render (:render static-fns))))\n\n(defn map-to-js [m]\n  (reduce-kv (fn [o k v]\n               (doto o\n                 (aset (name k) v)))\n             #js{} m))\n\n(defn cljsify [body]\n  (-> body\n      camelify-map-keys\n      add-obligatory\n      wrap-funs\n      map-to-js))\n\n(defn create-class [body]\n  {:pre [(map? body)]}\n  (->> body\n       cljsify\n       util/create-class))\n\n(defn component-path [c]\n  (let [elem (some-> (or (some-> c ($ :_reactInternalInstance))\n                          c)\n                     ($ :_currentElement))\n        name (some-> elem\n                     ($ :type)\n                     ($ :displayName))\n        path (some-> elem\n                     ($ :_owner)\n                     component-path\n                     (str \" > \"))\n        res (str path name)]\n    (when-not (empty? res) res)))\n\n(defn comp-name []\n  (if (dev?)\n    (let [c *current-component*\n          n (or (component-path c)\n                (some-> c .-constructor util/fun-name))]\n      (if-not (empty? n)\n        (str \" (in \" n \")\")\n        \"\"))\n    \"\"))\n\n(defn fn-to-class [f]\n  (assert-callable f)\n  (warn-unless (not (and (react-class? f)\n                         (not (reagent-class? f))))\n               \"Using native React classes directly in Hiccup forms \"\n               \"is not supported. Use create-element or \"\n               \"adapt-react-class instead: \" (let [n (util/fun-name f)]\n                                               (if (empty? n) f n))\n               (comp-name))\n  (if (reagent-class? f)\n    (cache-react-class f f)\n    (let [spec (meta f)\n          withrender (assoc spec :reagent-render f)\n          res (create-class withrender)]\n      (cache-react-class f res))))\n\n(defn as-class [tag]\n  (if-some [cached-class (cached-react-class tag)]\n    cached-class\n    (fn-to-class tag)))\n\n(defn reactify-component [comp]\n  (if (react-class? comp)\n    comp\n    (as-class comp)))\n"],"mappings":"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","names":["reagent.impl.component/shallow-obj-to-map","cljs.core/js-keys","o","ks","i","len","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","m","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","k","reagent.impl.component/extract-props","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","v","cljs.core/map?","p","reagent.impl.component/extract-children","cljs.core/count","first-child","cljs.core.subvec.cljs$core$IFn$_invoke$arity$2","reagent.impl.component/props-argv","temp__5459__auto__","a","c","reagent.impl.component/get-argv","reagent.impl.component/get-props","reagent.impl.component/get-children","reagent.impl.util/react","cljs.core.into.cljs$core$IFn$_invoke$arity$2","reagent.impl.component/reagent-class?","cljs.core/fn?","G__16809","reagent.impl.component/react-class?","G__16811","reagent.impl.component/reagent-component?","reagent.impl.component/cached-react-class","reagent.impl.component/cache-react-class","constructor","reagent.impl.component/state-atom","this","sa","reagent.ratom.atom.cljs$core$IFn$_invoke$arity$1","js/reagent","js/reagent.impl","js/reagent.impl.component","js/reagent.impl.component.as-element","reagent.impl.component/as-element","reagent.impl.component/wrap-render","cljs.core/ifn?","js/Error","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","f","G__16816","n","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","cljs.core.into_array.cljs$core$IFn$_invoke$arity$1","cljs.core/vector?","res","G__16817","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","cljs.core/vector","args","reagent.impl.component/do-render","*current-component*-temp-val__16821","*current-component*-orig-val__16820","reagent.impl.component/*current-component*","ok","reagent.debug/has-console","reagent.debug/tracking","reagent.debug/track-console","js/console","reagent.impl.component/comp-name","reagent.impl.component/rat-opts","reagent.impl.component/static-fns","reagent.impl.util/*non-reactive*","reagent.impl.batching/mark-rendered","rat","reagent.ratom/run-in-reaction","reagent.impl.batching/queue-render","reagent.impl.component/custom-wrapper","G__16822","cljs.core/Keyword","key","cljs.core/reset!","nextprops","or__4047__auto__","reagent.impl.util/*always-update*","old-argv","new-argv","noargv","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","oldprops","reagent.impl.batching/next-mount-count","G__16829","reagent.ratom/dispose!","reagent.impl.component/get-wrapper","and__4036__auto__","wrap","reagent.impl.component/obligatory","reagent.impl.component/dash-to-camel","reagent.impl.util/memoize-1","reagent.impl.util/dash-to-camel","reagent.impl.component/camelify-map-keys","cljs.core/reduce-kv","fun-map","reagent.impl.component/add-obligatory","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","reagent.impl.component/wrap-funs","cljs.core/select-keys","fmap","renders","cljs.core/vals","cljs.core/first","render-fun","reagent.impl.util/fun-name","G__16830","name","cljs.core.gensym.cljs$core$IFn$_invoke$arity$1","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","legacy-render","reagent.impl.component/map-to-js","G__16831","cljs.core/name","reagent.impl.component/cljsify","body","reagent.impl.component/create-class","G__16832","reagent.impl.util/create-class","reagent.impl.component/component-path","G__16833","G__16835","G__16836","elem","G__16837","path","cljs.core/empty?","G__16838","reagent.impl.component/fn-to-class","cljs.core/meta","spec","withrender","reagent.impl.component/as-class","tag","cached-class","reagent.impl.component/reactify-component","comp"]}
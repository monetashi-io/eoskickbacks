{"version":3,"sources":["io/eoskickbacks/frontend/routes.cljs"],"sourcesContent":["(ns io.eoskickbacks.frontend.routes\n  (:require [bidi.bidi :as bidi]\n            [pushy.core :as pushy]\n            [re-frame.core :refer [dispatch]]))\n\n;; The routes setup is inspired by J. Pablo Fern\u00e1ndez \n;; source: https://pupeno.com/2015/08/26/no-hashes-bidirectional-routing-in-re-frame-with-bidi-and-pushy/\n\n;; -- Routes ------------------------------------------------------------------\n;; Define routes so that when we enter specific path the router knows what to\n;; show us. A route is simply a data structure - Vector - with a pattern and \n;; a result.\n(def routes\n  [\"/\" {\"\"         :home\n        \"team\"     :team\n        \"stats\"    :stats\n        \"why\"      :register\n        \"settings\" :settings\n        \"news/\" {[:slug]    :news}\n        \"check-rewards/\" {[:eos-account] {\"\"           :profile\n                                          \"/txs\" :profile-transactions}}}])\n\n;; -- parse-url ---------------------------------------------------------------\n;; By using bidi/match-route we convert URL into a data structure and check if \n;; a route exists in our routes.\n(defn- parse-url\n  [url]\n  (bidi/match-route routes url))\n\n;; -- dispatch-route ----------------------------------------------------------\n;; When we find a match, with parse-url, we will use the output to\n;; dispatch route and redirect a user\n(defn- dispatch-route\n  [matched-route]\n  (dispatch [:set-active-page {:page      (:handler matched-route)\n                               :news      (get-in matched-route [:route-params :slug])\n                               :profile   (get-in matched-route [:route-params :eos-account])\n                               :profile-transactions (get-in matched-route [:route-params :eos-account])}]))\n\n;; -- Router Start ------------------------------------------------------------\n;;\n(defn start!\n  []\n  ;; pushy is here to take care of nice looking urls. Normally we would have to\n  ;; deal with #. By using pushy we can have '/about' instead of '/#/about'.\n  ;; pushy takes three arguments:\n  ;; dispatch-fn - which dispatches when a match is found\n  ;; match-fn - which cheks to see if a route exist\n  ;; identity-fn (optional) - extract the route from value returned by match-fn\n  (pushy/start! (pushy/pushy dispatch-route parse-url)))\n\n;; -- url-for -----------------------------------------------------------------\n;; To dispatch routes in our UI (view) we will use url-for and then pass a\n;; keyword to which route we want to direct the user.\n;; usage: (url-for :home)\n(def url-for (partial bidi/path-for routes))\n\n;; -- history -----------------------------------------------------------------\n;; we need to hook up history to our set-token so that we can go back\n(def history (pushy/pushy dispatch-route (partial bidi/match-route routes)))\n\n;; -- set-token! --------------------------------------------------------------\n;; To change route after some actions we will need to set url and for that we\n;; will use set-token! that needs history and the token\n(defn set-token!\n  [token]\n  (pushy/set-token! history token))\n"],"mappings":";;;;;AAYA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKA;AAaL,AAAA,AAAOC,AACJ;AADH,AAEE,AAACC,AAAiBF,AAAOG;;AAK3B,AAAA,AAAOC,AACJ;AADH,AAEE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAwC,AAAA,AAAUG,AACV,AAAA,AAAA,AAAA,AAACC,AAAOD,AACR,AAAA,AAAA,AAAA,AAACC,AAAOD,AACG,AAAA,AAAA,AAAA,AAACC,AAAOD;AAH3D,AAAA,AAAAF,AAAAA,AAACC,AAAAA,AAAAA;;AAOH,AAAA,AAAMG;AAAN,AAQE,AAACC,AAAa,AAACC,AAAYP,AAAeH;;AAM5C,AAAKW,AAAQ,AAACC,AAAQC,AAAcd;AAIpC,AAAKe,AAAQ,AAACJ,AAAYP,AAAe,AAACS,AAAQX,AAAiBF;AAKnE,AAAA,AAAMgB,AACH;AADH,AAEE,AAACC,AAAiBF,AAAQG","names":["io.eoskickbacks.frontend.routes/routes","io.eoskickbacks.frontend.routes/parse-url","bidi.bidi/match-route","url","io.eoskickbacks.frontend.routes/dispatch-route","G__18323","re-frame.core/dispatch","matched-route","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","io.eoskickbacks.frontend.routes/start!","pushy.core/start!","pushy.core/pushy","io.eoskickbacks.frontend.routes/url-for","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","bidi.bidi/path-for","io.eoskickbacks.frontend.routes/history","io.eoskickbacks.frontend.routes/set-token!","pushy.core.set_token_BANG_.cljs$core$IFn$_invoke$arity$2","token"]}
{"version":3,"sources":["re_frame/loggers.cljc"],"sourcesContent":["(ns re-frame.loggers\n  (:require\n   [clojure.set :refer [difference]]\n   #?@(:clj [[clojure.string :as str]\n             [clojure.tools.logging :as log]])))\n\n#?(:clj (defn log [level & args]\n          (log/log level (if (= 1 (count args))\n                           (first args)\n                           (str/join \" \" args)))))\n\n\n;; XXX should loggers be put in the registrar ??\n(def ^:private loggers\n  \"Holds the current set of logging functions.\n   By default, re-frame uses the functions provided by js/console.\n   Use `set-loggers!` to change these defaults\n  \"\n  (atom #?(:cljs {:log       (js/console.log.bind   js/console)\n                  :warn      (js/console.warn.bind  js/console)\n                  :error     (js/console.error.bind js/console)\n                  :group     (if (.-group js/console)         ;; console.group does not exist  < IE 11\n                               (js/console.group.bind js/console)\n                               (js/console.log.bind   js/console))\n                  :groupEnd  (if (.-groupEnd js/console)        ;; console.groupEnd does not exist  < IE 11\n                               (js/console.groupEnd.bind js/console)\n                               #())})\n        ;; clojure versions\n        #?(:clj {:log      (partial log :info)\n                 :warn     (partial log :warn)\n                 :error    (partial log :error)\n                 :group    (partial log :info)\n                 :groupEnd  #()})))\n\n(defn console\n  [level & args]\n  (assert (contains? @loggers level) (str \"re-frame: log called with unknown level: \" level))\n  (apply (level @loggers) args))\n\n\n(defn set-loggers!\n  \"Change the set (or a subset) of logging functions used by re-frame.\n  `new-loggers` should be a map with the same keys as `loggers` (above)\"\n  [new-loggers]\n  (assert  (empty? (difference (set (keys new-loggers)) (-> @loggers keys set))) \"Unknown keys in new-loggers\")\n  (swap! loggers merge new-loggers))\n\n(defn get-loggers\n  \"Get the current logging functions used by re-frame.\"\n  []\n  @loggers)\n"],"mappings":";;;AAaA;;;;;;AAAeA,AAKb,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AAA0B,AAACC,AAAsBC,AACvB,AAACC,AAAsBD,AACvB,AAACE,AAAsBF,AACvB,AAAI,AAASA,AACX,AAACG,AAAsBH,AACvB,AAACD,AAAsBC,AACzB,AAAA,AAAI,AAAYA,AACd,AAACI,AAAyBJ;AAD5B,AAAA;;AAU7B,AAAA,AAAA,AAAA,AAAMS;AAAN,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA,AAAA;;AAAA,AAAA,AAAA,AAAAJ,AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAF;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAE,AAAA,AAAA,AAAA,AAAAC;;;AAAA,AAAA,AAAA,AAAAD,AAAA,AACG,AAAQ;AADX,AAEE,AAAQ,AAAA,AAAAQ,AAACC,AAAWrB,AAAQsB;AAA5B;AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAA,AAAA,AAAmC,AAAA,AAAiDG;;;AACpF,AAACC,AAAM,AAAA,AAAA,AAAAH,AAAQpB;AAAR,AAAA,AAAAwB,AAAAA,AAACF,AAAAA,AAAAA;AAAgBG;;;AAH1B,AAAA,AAAAb,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC;AAAA,AAAA,AAAAC,AAAAD;AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAE,AAAAC,AAAAH;;;AAAA,AAMA;;;;AAAA,AAAMW,AAGH;AAHH,AAIE,AAAS,AAACC,AAAO,AAACC,AAAW,AAACC,AAAI,AAACC,AAAKC,AAAc,AAAA,AAAA,AAAAX,AAAKpB,AAAQ8B,AAAKD;AAAxE;AAAA,AAAA,AAAA,AAAAV,AAAA,AAAA,AAAA,AAAA,AAAA;;;AACA,AAACa,AAAMhC,AAAQiC,AAAMF;;AAEvB;;;AAAA,AAAMG;AAAN,AAAA,AAAAd,AAGGpB","names":["re-frame.loggers/loggers","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","js/console.log.bind","js/console","js/console.warn.bind","js/console.error.bind","js/console.group.bind","js/console.groupEnd.bind","i__4642__auto__","len__4641__auto__","args__4647__auto__","cljs.core/IndexedSeq","re-frame.loggers/console","argseq__4648__auto__","cljs.core/first","seq16662","cljs.core/next","self__4628__auto__","G__16665","js/Error","cljs.core/deref","cljs.core/contains?","level","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","G__16670","args","re-frame.loggers/set-loggers!","cljs.core/empty?","clojure.set.difference.cljs$core$IFn$_invoke$arity$2","cljs.core/set","cljs.core/keys","new-loggers","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/merge","re-frame.loggers/get-loggers"]}
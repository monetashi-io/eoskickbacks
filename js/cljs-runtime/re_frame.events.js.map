{"version":3,"sources":["re_frame/events.cljc"],"sourcesContent":["(ns re-frame.events\n  (:require [re-frame.db          :refer [app-db]]\n            [re-frame.utils       :refer [first-in-vector]]\n            [re-frame.interop     :refer [empty-queue debug-enabled?]]\n            [re-frame.registrar   :refer [get-handler register-handler]]\n            [re-frame.loggers     :refer [console]]\n            [re-frame.interceptor :as  interceptor]\n            [re-frame.trace       :as trace :include-macros true]))\n\n\n(def kind :event)\n(assert (re-frame.registrar/kinds kind))\n\n(defn- flatten-and-remove-nils\n  \"`interceptors` might have nested collections, and contain nil elements.\n  return a flat collection, with all nils removed.\n  This function is 9/10 about giving good error messages.\"\n  [id interceptors]\n  (let [make-chain  #(->> % flatten (remove nil?))]\n    (if-not debug-enabled?\n      (make-chain interceptors)\n      (do    ;; do a whole lot of development time checks\n        (when-not (coll? interceptors)\n          (console :error \"re-frame: when registering\" id \", expected a collection of interceptors, got:\" interceptors))\n        (let [chain (make-chain interceptors)]\n          (when (empty? chain)\n            (console :error \"re-frame: when registering\" id \", given an empty interceptor chain\"))\n          (when-let [not-i (first (remove interceptor/interceptor? chain))]\n            (if (fn? not-i)\n              (console :error \"re-frame: when registering\" id \", got a function instead of an interceptor. Did you provide old style middleware by mistake? Got:\" not-i)\n              (console :error \"re-frame: when registering\" id \", expected interceptors, but got:\" not-i)))\n          chain)))))\n\n\n(defn register\n  \"Associate the given event `id` with the given collection of `interceptors`.\n\n   `interceptors` may contain nested collections and there may be nils\n   at any level,so process this structure into a simple, nil-less vector\n   before registration.\n\n   Typically, an `event handler` will be at the end of the chain (wrapped\n   in an interceptor).\"\n  [id interceptors]\n  (register-handler kind id (flatten-and-remove-nils id interceptors)))\n\n\n\n;; -- handle event --------------------------------------------------------------------------------\n\n(def ^:dynamic *handling* nil)    ;; remember what event we are currently handling\n\n(defn handle\n  \"Given an event vector `event-v`, look up the associated interceptor chain, and execute it.\"\n  [event-v]\n  (let [event-id  (first-in-vector event-v)]\n    (if-let [interceptors  (get-handler kind event-id true)]\n      (if *handling*\n        (console :error \"re-frame: while handling\" *handling* \", dispatch-sync was called for\" event-v \". You can't call dispatch-sync within an event handler.\")\n        (binding [*handling*  event-v]\n          (trace/with-trace {:operation event-id\n                             :op-type   kind\n                             :tags      {:event event-v}}\n            (trace/merge-trace! {:tags {:app-db-before @app-db}})\n            (interceptor/execute event-v interceptors)\n            (trace/merge-trace! {:tags {:app-db-after @app-db}})))))))\n\n\n"],"mappings":"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","names":["re-frame.events/kind","js/Error","re-frame.registrar/kinds","re-frame.events/flatten-and-remove-nils","cljs.core/flatten","p1__17328#","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","cljs.core/nil?","re-frame.interop/debug-enabled?","make-chain","interceptors","cljs.core/coll?","re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic","id","cljs.core/empty?","chain","temp__5457__auto__","cljs.core/first","re-frame.interceptor/interceptor?","cljs.core/fn?","not-i","re-frame.events/register","re-frame.registrar/register-handler","re-frame.events/*handling*","re-frame.events/handle","re-frame.utils/first-in-vector","event-v","temp__5455__auto__","re_frame.registrar.get_handler.cljs$core$IFn$_invoke$arity$3","event-id","*handling*-temp-val__17337","*handling*-orig-val__17336","re-frame.trace/is-trace-enabled?","re-frame.trace/*current-trace*","re-frame.trace/start-trace","*current-trace*-temp-val__17341","re-frame.interop/now","end__17222__auto__","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","re-frame.trace/traces","cljs.core/conj","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","duration__17223__auto__","re-frame.trace/run-tracing-callbacks!","*current-trace*-orig-val__17340","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core/merge","cljs.core/deref","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","new-trace__17224__auto__","re-frame.db/app-db","re-frame.interceptor/execute"]}
{"version":3,"sources":["io/eoskickbacks/frontend/core.cljs"],"sourcesContent":["(ns io.eoskickbacks.frontend.core\n  (:require [re-frame.core :refer [dispatch dispatch-sync clear-subscription-cache!]]\n            [reagent.core :as reagent]\n            [io.eoskickbacks.frontend.routes :as routes]\n            [io.eoskickbacks.frontend.events]  ;; These three are only\n            [io.eoskickbacks.frontend.subs]    ;; required to make the compiler\n            [io.eoskickbacks.frontend.views])) ;; load them\n\n;; -- Entry Point -------------------------------------------------------------\n;; Within ../../resources/public/index.html you'll see this code:\n;; window.onload = function() { conduit.core.main() } this is the entry \n;; function that kicks off the app once the HTML is loaded.\n;;\n(defn ^:export main\n  []\n  ;; Routre config can be fount within `./router.cljs`. Here we are just hooking\n  ;; up the router on start\n  (routes/start!)\n\n  ;; Put an initial value into app-db.\n  ;; The event handler for `:initialise-db` can be found in `events.cljs`\n  ;; Using the sync version of dispatch means that value is in\n  ;; place before we go onto the next step.\n  (dispatch-sync [:initialise-db])\n\n  ;; Render the UI into the HTML's <div id=\"app\" /> element\n  ;; The view function `conduit.views/conduit-app` is the\n  ;; root view for the entire UI.\n  (reagent/render [io.eoskickbacks.frontend.views/render]\n    (.getElementById js/document \"app\")))\n"],"mappings":";;;;;;;;AAaA,AAAA,AAAeA;AAAf,AAIE,AAACC;;AAMD,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAAA,AAACC,AAAAA,AAAAA;;AAKD,AAAA,AAACC,AAAgBC,AACf,AAAA,AAAiBC","names":["io.eoskickbacks.frontend.core/main","io.eoskickbacks.frontend.routes/start!","G__18501","re-frame.core/dispatch-sync","reagent.core.render.cljs$core$IFn$_invoke$arity$2","io.eoskickbacks.frontend.views/render","js/document"]}
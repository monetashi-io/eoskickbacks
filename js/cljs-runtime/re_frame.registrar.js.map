{"version":3,"sources":["re_frame/registrar.cljc"],"sourcesContent":["(ns re-frame.registrar\n  \"In many places, re-frame asks you to associate an `id` (keyword)\n  with a `handler` (function).  This namespace contains the\n  central registry of such associations.\"\n  (:require  [re-frame.interop :refer [debug-enabled?]]\n             [re-frame.loggers :refer [console]]))\n\n\n;; kinds of handlers\n(def kinds #{:event :fx :cofx :sub})\n\n;; This atom contains a register of all handlers.\n;; Contains a two layer map, keyed first by `kind` (of handler), and then `id` of handler.\n;; Leaf nodes are handlers.\n(def kind->id->handler  (atom {}))\n\n\n(defn get-handler\n\n  ([kind]\n   (get @kind->id->handler kind))\n\n  ([kind id]\n   (-> (get @kind->id->handler kind)\n       (get id)))\n\n  ([kind id required?]\n   (let [handler (get-handler kind id)]\n     (when debug-enabled?                          ;; This is in a separate `when` so Closure DCE can run ...\n       (when (and required? (nil? handler))        ;; ...otherwise you'd need to type-hint the `and` with a ^boolean for DCE.\n         (console :error \"re-frame: no\" (str kind) \"handler registered for:\" id)))\n     handler)))\n\n\n(defn register-handler\n  [kind id handler-fn]\n  (when debug-enabled?                                       ;; This is in a separate when so Closure DCE can run\n    (when (get-handler kind id false)\n      (console :warn \"re-frame: overwriting\" (str kind) \"handler for:\" id)))   ;; allow it, but warn. Happens on figwheel reloads.\n  (swap! kind->id->handler assoc-in [kind id] handler-fn)\n  handler-fn)    ;; note: returns the just registered handler\n\n\n(defn clear-handlers\n  ([]            ;; clear all kinds\n   (reset! kind->id->handler {}))\n\n  ([kind]        ;; clear all handlers for this kind\n   (assert (kinds kind))\n   (swap! kind->id->handler dissoc kind))\n\n  ([kind id]     ;; clear a single handler for a kind\n   (assert (kinds kind))\n   (if (get-handler kind id)\n     (swap! kind->id->handler update-in [kind] dissoc id)\n     (console :warn \"re-frame: can't clear\" (str kind) \"handler for\" (str id \". Handler not found.\")))))\n"],"mappings":";;;;AASA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKA;AAKL,AAAKC,AAAmB,AAAA,AAACC;AAGzB,AAAA,AAAA,AAAA,AAAME;AAAN,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAD;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMD,AAEF;AAFJ,AAGG,AAAA,AAAAE,AAACC,AAAKN,AAAkBO;;;AAH3B,AAAA,AAAA,AAAMJ,AAKF,AAAK;AALT,AAMO,AAAA,AAAAE,AAACC,AAAKN,AAAkBO,AACxB,AAACD,AAAIE;;;AAPZ,AAAA,AAAA,AAAML,AASF,AAAK,AAAG;AATZ,AAUG,AAAM,AAAQ,AAACM,AAAYF,AAAKC;AAAhC,AACE,AAAME;AAAN,AACE,AAAM,AAAA,AAAKE;AAAL,AAAA,AAAAD;AAAe,AAAA,AAAME;;AAArBF;;;AAAN,AACE,AAAA,AAAA,AAAA,AAACG,AAA8B,AAAKP,AAAgCC;;AADtE;;AADF;;AAGAK;;;AAdL,AAAA,AAAA,AAAMV;;AAAN,AAiBA,AAAA,AAAMY,AACH,AAAK,AAAG;AADX,AAEE,AAAML;AAAN,AACE,AAAM,AAAA,AAACM,AAAYT,AAAKC;AAAxB,AACE,AAAA,AAAA,AAAA,AAACM,AAAsC,AAAKP,AAAqBC;;AADnE;;AADF;;AAGA,AAAA,AAACS,AAAMjB,AAAkBkB,AAAUX,AAAKC,AAAIW;;AAC5CA;;AAGF,AAAA,AAAA,AAAA,AAAME;AAAN,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAD;AAAA;AAAA,AAAAC;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAjB,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMiB;AAAN,AAEG,AAAA,AAACC,AAAOtB;;;AAFX,AAAA,AAAA,AAAMqB,AAIF;AAJJ,AAKG,AAAQ,AAACtB,AAAAA,AAAAA,AAAMQ,AAAAA;AAAf;AAAA,AAAA,AAAA,AAAAH,AAAA;;;AACA,AAACmB,AAAMvB,AAAkBwB,AAAOjB;;;AANnC,AAAA,AAAA,AAAMc,AAQF,AAAK;AART,AASG,AAAQ,AAACtB,AAAAA,AAAAA,AAAMQ,AAAAA;AAAf;AAAA,AAAA,AAAA,AAAAH,AAAA;;;AACA,AAAI,AAACK,AAAYF,AAAKC;AACpB,AAAA,AAACiB,AAAMzB,AAAkB0B,AAAWnB,AAAMiB,AAAOhB;;AACjD,AAAA,AAAA,AAAA,AAACM,AAAsC,AAAKP,AAAoB,AAAA,AAAKC;;;;AAZ1E,AAAA,AAAA,AAAMa;;AAAN","names":["re-frame.registrar/kinds","re-frame.registrar/kind->id->handler","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","G__17052","re-frame.registrar/get-handler","js/Error","cljs.core/deref","cljs.core.get.cljs$core$IFn$_invoke$arity$2","kind","id","re_frame.registrar.get_handler.cljs$core$IFn$_invoke$arity$2","re-frame.interop/debug-enabled?","and__4036__auto__","required?","handler","re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic","re-frame.registrar/register-handler","re_frame.registrar.get_handler.cljs$core$IFn$_invoke$arity$3","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc-in","handler-fn","G__17068","re-frame.registrar/clear-handlers","cljs.core/reset!","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/dissoc","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic","cljs.core/update-in"]}
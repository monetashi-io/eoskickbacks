{"version":3,"sources":["re_frame/router.cljc"],"sourcesContent":["(ns re-frame.router\n  (:require [re-frame.events  :refer [handle]]\n            [re-frame.interop :refer [after-render empty-queue next-tick]]\n            [re-frame.loggers :refer [console]]\n            [re-frame.trace   :as trace :include-macros true]))\n\n\n;; -- Router Loop ------------------------------------------------------------\n;;\n;; A call to \"re-frame.core/dispatch\" places an event on a queue for processing.\n;; A short time later, the handler registered to handle this event will be run.\n;; What follows is the implementation of this process.\n;;\n;; The task is to process queued events in a perpetual loop, one after\n;; the other, FIFO, calling the registered event-handler for each, being idle when\n;; there are no events, and firing up when one arrives.\n;;\n;; But browsers only have a single thread of control and we must be\n;; careful to not hog the CPU. When processing events one after another, we\n;; must regularly hand back control to the browser, so it can redraw, process\n;; websockets, etc. But not too regularly! If we are in a de-focused browser\n;; tab, our app will be CPU throttled. Each time we get back control, we have\n;; to process all queued events, or else something like a bursty websocket\n;; (producing events) might overwhelm the queue. So there's a balance.\n;;\n;; The processing/handling of an event happens \"asynchronously\" sometime after\n;; that event was enqueued via \"dispatch\". The original implementation of this router loop\n;; used `core.async`. As a result, it was fairly simple, and it mostly worked,\n;; but it did not give enough control. So now we hand-roll our own,\n;; finite-state-machine and all.\n;;\n;; In what follows, the strategy is this:\n;;   - maintain a FIFO queue of `dispatched` events.\n;;   - when a new event arrives, \"schedule\" processing of this queue using\n;;     goog.async.nextTick, which means it will happen \"very soon\".\n;;   - when processing events, one after the other, do ALL the currently\n;;     queued events. Don't stop. Don't yield to the browser. Hog that CPU.\n;;   - but if any new events are dispatched during this cycle of processing,\n;;     don't do them immediately. Leave them queued. Yield first to the browser,\n;;     and do these new events in the next processing cycle. That way we drain\n;;     the queue up to a point, but we never hog the CPU forever. In\n;;     particular, we handle the case where handling one event will beget\n;;     another event. The freshly begotten event will be handled next cycle,\n;;     with yielding in-between.\n;;   - In some cases, an event should not be handled until after the GUI has been\n;;     updated, i.e., after the next Reagent animation frame. In such a case,\n;;     the event should be dispatched with :flush-dom metadata like this:\n;;       (dispatch ^:flush-dom [:event-id other params])\n;;     Such an event will temporarily block all further processing because\n;;     events are processed sequentially: we handle one event completely\n;;     before we handle the ones behind it.\n;;\n;; Implementation notes:\n;;   - queue processing can be in a number of states: scheduled, running, paused\n;;     etc. So it is modeled as a Finite State Machine.\n;;     See \"-fsm-trigger\" (below) for the states and transitions.\n;;   - the scheduling is done via \"goog.async.nextTick\" which is pretty quick\n;;   - when the event has :flush-dom metadata we schedule via\n;;       \"reagent.core.after-render\"\n;;     which will run event processing after the next Reagent animation frame.\n;;\n\n;; Events can have metadata which says to pause event processing.\n;; event metadata -> \"run later\" functions\n(def later-fns\n  {:flush-dom (fn [f] (after-render #(next-tick f)))   ;; one tick after the end of the next annimation frame\n   :yield     next-tick})               ;; almost immediately\n\n\n;; Event Queue Abstraction\n(defprotocol IEventQueue\n\n  ;; -- API\n  (push [this event])\n  (add-post-event-callback [this id callack])\n  (remove-post-event-callback [this f])\n  (purge [this])\n\n  ;; -- Implementation via a Finite State Machine\n  (-fsm-trigger [this trigger arg])\n\n  ;; -- Finite State Machine actions\n  (-add-event [this event])\n  (-process-1st-event-in-queue [this])\n  (-run-next-tick [this])\n  (-run-queue [this])\n  (-exception [this ex])\n  (-pause [this later-fn])\n  (-resume [this])\n  (-call-post-event-callbacks [this event]))\n\n\n;; Concrete implementation of IEventQueue\n(deftype EventQueue [#?(:cljs ^:mutable fsm-state               :clj ^:volatile-mutable fsm-state)\n                     #?(:cljs ^:mutable queue                   :clj ^:volatile-mutable queue)\n                     #?(:cljs ^:mutable post-event-callback-fns :clj ^:volatile-mutable post-event-callback-fns)]\n  IEventQueue\n\n  ;; -- API ------------------------------------------------------------------\n\n  (push [this event]         ;; presumably called by dispatch\n    (-fsm-trigger this :add-event event))\n\n  ;; register a callback function which will be called after each event is processed\n  (add-post-event-callback [_ id callback-fn]\n    (if (contains? post-event-callback-fns id)\n      (console :warn \"re-frame: overwriting existing post event call back with id:\" id))\n    (->> (assoc post-event-callback-fns id callback-fn)\n         (set! post-event-callback-fns)))\n\n  (remove-post-event-callback [_ id]\n    (if-not (contains? post-event-callback-fns id)\n      (console :warn \"re-frame: could not remove post event call back with id:\" id)\n      (->> (dissoc post-event-callback-fns id)\n           (set! post-event-callback-fns))))\n\n  (purge [_]\n    (set! queue empty-queue))\n\n  ;; -- FSM Implementation ---------------------------------------------------\n\n  (-fsm-trigger\n    [this trigger arg]\n\n    ;; The following \"case\" implements the Finite State Machine.\n    ;; Given a \"trigger\", and the existing FSM state, it computes the\n    ;; new FSM state and the transition action (function).\n\n    (locking this\n      (trace/with-trace {:op-type ::fsm-trigger}\n        (let [[new-fsm-state action-fn]\n              (case [fsm-state trigger]\n\n                ;; You should read the following \"case\" as:\n                ;; [current-FSM-state trigger] -> [new-FSM-state action-fn]\n                ;;\n                ;; So, for example, the next line should be interpreted as:\n                ;; if you are in state \":idle\" and a trigger \":add-event\"\n                ;; happens, then move the FSM to state \":scheduled\" and execute\n                ;; that two-part \"do\" function.\n                [:idle :add-event] [:scheduled #(do (-add-event this arg)\n                                                    (-run-next-tick this))]\n\n                ;; State: :scheduled  (the queue is scheduled to run, soon)\n                [:scheduled :add-event] [:scheduled #(-add-event this arg)]\n                [:scheduled :run-queue] [:running #(-run-queue this)]\n\n                ;; State: :running (the queue is being processed one event after another)\n                [:running :add-event] [:running #(-add-event this arg)]\n                [:running :pause] [:paused #(-pause this arg)]\n                [:running :exception] [:idle #(-exception this arg)]\n                [:running :finish-run] (if (empty? queue)     ;; FSM guard\n                                         [:idle]\n                                         [:scheduled #(-run-next-tick this)])\n\n                ;; State: :paused (:flush-dom metadata on an event has caused a temporary pause in processing)\n                [:paused :add-event] [:paused #(-add-event this arg)]\n                [:paused :resume] [:running #(-resume this)]\n\n                (throw (ex-info (str \"re-frame: router state transition not found. \" fsm-state \" \" trigger)\n                                {:fsm-state fsm-state, :trigger trigger})))]\n\n          ;; The \"case\" above computed both the new FSM state, and the action. Now, make it happen.\n\n          (trace/merge-trace! {:operation [fsm-state trigger]\n                               :tags      {:current-state fsm-state\n                                           :new-state     new-fsm-state}})\n          (set! fsm-state new-fsm-state)\n          (when action-fn (action-fn))))))\n\n  (-add-event\n    [_ event]\n    (set! queue (conj queue event)))\n\n  (-process-1st-event-in-queue\n    [this]\n    (let [event-v (peek queue)]\n      (try\n        (handle event-v)\n        (set! queue (pop queue))\n        (-call-post-event-callbacks this event-v)\n        (catch #?(:cljs :default :clj Exception) ex\n          (-fsm-trigger this :exception ex)))))\n\n  (-run-next-tick\n    [this]\n    (next-tick #(-fsm-trigger this :run-queue nil)))\n\n  ;; Process all the events currently in the queue, but not any new ones.\n  ;; Be aware that events might have metadata which will pause processing.\n  (-run-queue\n    [this]\n    (loop [n (count queue)]\n      (if (zero? n)\n        (-fsm-trigger this :finish-run nil)\n        (if-let [later-fn (some later-fns (-> queue peek meta keys))]  ;; any metadata which causes pausing?\n          (-fsm-trigger this :pause later-fn)\n          (do (-process-1st-event-in-queue this)\n              (recur (dec n)))))))\n\n  (-exception\n    [this ex]\n    (purge this)   ;; purge the queue\n    (throw ex))\n\n  (-pause\n    [this later-fn]\n    (later-fn #(-fsm-trigger this :resume nil)))\n\n  (-call-post-event-callbacks\n    [_ event-v]\n    (doseq [callback (vals post-event-callback-fns)]\n      (callback event-v queue)))\n\n  (-resume\n    [this]\n    (-process-1st-event-in-queue this)  ;; do the event which paused processing\n    (-run-queue this)))                 ;; do the rest of the queued events\n\n\n;; ---------------------------------------------------------------------------\n;; Event Queue\n;; When \"dispatch\" is called, the event is added into this event queue.  Later,\n;;  the queue will \"run\" and the event will be \"handled\" by the registered function.\n;;\n(def event-queue (->EventQueue :idle empty-queue {}))\n\n\n;; ---------------------------------------------------------------------------\n;; Dispatching\n;;\n\n(defn dispatch\n  \"Enqueue `event` for processing by event handling machinery.\n\n  `event` is a vector of length >= 1. The 1st element identifies the kind of event.\n\n  Note: the event handler is not run immediately - it is not run\n  synchronously. It will likely be run 'very soon', although it may be\n  added to the end of a FIFO queue which already contain events.\n\n  Usage:\n     (dispatch [:order-pizza {:supreme 2 :meatlovers 1 :veg 1})\"\n  [event]\n  (if (nil? event)\n      (throw (ex-info \"re-frame: you called \\\"dispatch\\\" without an event vector.\" {}))\n      (push event-queue event))\n  nil)                                           ;; Ensure nil return. See https://github.com/Day8/re-frame/wiki/Beware-Returning-False\n\n\n(defn dispatch-sync\n  \"Synchronously (immediately) process `event`. Do not queue.\n\n  Generally, don't use this. Instead use `dispatch`. It is an error\n  to use `dispatch-sync` within an event handler.\n\n  Useful when any delay in processing is a problem:\n     1. the `:on-change` handler of a text field where we are expecting fast typing.\n     2  when initialising your app - see 'main' in todomvc examples\n     3. in a unit test where we don't want the action 'later'\n\n  Usage:\n     (dispatch-sync [:sing :falsetto 634])\"\n  [event-v]\n  (handle event-v)\n  (-call-post-event-callbacks event-queue event-v)  ;; slightly ugly hack. Run the registered post event callbacks.\n  nil)                                              ;; Ensure nil return. See https://github.com/Day8/re-frame/wiki/Beware-Returning-False\n"],"mappings":"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","names":["re-frame.router/later-fns","G__17358","re-frame.interop/after-render","re-frame.interop/next-tick","f","re-frame.router/push","goog/typeOf","x__4347__auto__","m__4348__auto__","cljs.core/missing-protocol","re-frame.router/add-post-event-callback","re-frame.router/remove-post-event-callback","re-frame.router/purge","re-frame.router/-fsm-trigger","re-frame.router/-add-event","re-frame.router/-process-1st-event-in-queue","re-frame.router/-run-next-tick","re-frame.router/-run-queue","re-frame.router/-exception","re-frame.router/-pause","re-frame.router/-resume","re-frame.router/-call-post-event-callbacks","re-frame.router/IEventQueue","this","event","id","callack","trigger","arg","ex","later-fn","cljs.core/PROTOCOL_SENTINEL","cljs.core/-write","writer__4291__auto__","re-frame.router/EventQueue","re-frame.router/->EventQueue","fsm-state","queue","post-event-callback-fns","cljs.core/contains?","re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","callback-fn","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","re-frame.interop/empty-queue","re-frame.trace/is-trace-enabled?","re-frame.trace/*current-trace*","re-frame.trace/start-trace","*current-trace*-temp-val__17448","re-frame.interop/now","end__17222__auto__","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","re-frame.trace/traces","cljs.core/conj","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","duration__17223__auto__","re-frame.trace/run-tracing-callbacks!","*current-trace*-orig-val__17447","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","vec__17450","vec__17459","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","G__17453","G__17462","cljs.core/empty?","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core/merge","new-trace__17224__auto__","new-fsm-state","action-fn","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core/peek","e17474","re-frame.events/handle","event-v","cljs.core/pop","G__17445","cljs.core/count","n","temp__5455__auto__","cljs.core/some","cljs.core/meta","cljs.core/keys","G__17471","cljs.core/seq","i__17478","count__17477","chunk__17476","seq__17475","temp__5457__auto__","cljs.core/chunked-seq?","cljs.core/chunk-first","cljs.core/chunk-rest","c__4461__auto__","cljs.core/first","cljs.core/next","cljs.core/vals","callback","re-frame.router/event-queue","re-frame.router/dispatch","re-frame.router/dispatch-sync"]}